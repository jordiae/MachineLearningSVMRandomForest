
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/Universitat/7/APA/APA-mat-ini/APA-L0/APA-L0/.RData]

> setwd("~/Universitat/7/APA/problemes/llista5/grupal/MLSalaryClassification")
> set.seed(1111)
> # Llegim el dataset com diu l'enunciat
> Enquesta <- read.csv("Enquesta.csv", header=TRUE,sep=",",dec=",")
> set.seed(1111)
> # Llegim el dataset com diu l'enunciat
> Enquesta <- read.csv("Enquesta.csv", header=TRUE,sep=",",dec=",")
> summary(Enquesta)
      Num        Career      Gender            Age         Studying        Contract    Salary    Firmtype         Accgrade        Grade         Startwork      Image              Exp.gene        
 Min.   :  1.0   EI :81   female: 20   25-26years:17   no.stud :70   fix.cont  :110   <18k:16   priva:116   7-8accnote:48   6.5-7note:66   after.grad:53   Min.   :-3.310000   Min.   :-3.710000  
 1st Qu.: 37.5   ETS:20   male  :127   27-28years:35   yes.stud:77   other.cont:  9   25k :23   publi: 31   accnote<7 :76   <6.5note :26   befor.grad:94   1st Qu.:-0.465000   1st Qu.:-0.440000  
 Median : 74.0   TEL:46                29-30years:61                 temp.cont : 28   35k :71               accnote>8 :23   >7.5note :24                   Median : 0.050000   Median : 0.180000  
 Mean   : 74.0                         31years+  :34                                  45k :25                               7-7.5note:31                   Mean   : 0.000408   Mean   : 0.000272  
 3rd Qu.:110.5                                                                        >45k:12                                                              3rd Qu.: 0.695000   3rd Qu.: 0.755000  
 Max.   :147.0                                                                                                                                             Max.   : 2.190000   Max.   : 1.600000  
    Exp.spec            Qual.gen           Qual.spec              Value        Satisfaction      
 Min.   :-4.030000   Min.   :-3.620000   Min.   :-3.0600000   Min.   :-3.07   Min.   :-3.940000  
 1st Qu.:-0.510000   1st Qu.:-0.645000   1st Qu.:-0.5700000   1st Qu.:-0.37   1st Qu.:-0.465000  
 Median : 0.090000   Median : 0.000000   Median : 0.1600000   Median : 0.13   Median : 0.160000  
 Mean   : 0.000204   Mean   : 0.000068   Mean   : 0.0001361   Mean   : 0.00   Mean   : 0.000136  
 3rd Qu.: 0.640000   3rd Qu.: 0.745000   3rd Qu.: 0.6350000   3rd Qu.: 0.69   3rd Qu.: 0.680000  
 Max.   : 1.660000   Max.   : 2.320000   Max.   : 1.8300000   Max.   : 1.78   Max.   : 1.860000  
> # Problema: s'ha inclòs el número de fila com a variable (Num), l'eliminem
> Enquesta$Num <- NULL
> # Recodifiquem la variable Salary, com diu l'enunciat
> recodificarSalary <- function(x) {
+   if (x == "35k")
+     return("35k")
+   if (x == "<18k" || x == "25k")
+     return("<35k")
+   return(">35k")
+ }
> Enquesta$Salary.3 <- as.factor(mapply(recodificarSalary,Enquesta$Salary))
> # Comprovem que s'ha fet bé:
> sum(Enquesta$Salary.3 == "<35k") # 39
[1] 39
> sum(Enquesta$Salary.3 == "35k") # 71
[1] 71
> sum(Enquesta$Salary.3 == ">35k") # 37
[1] 37
> # L'enunciat diu que utilitzem només les variables indicades, que entenem que són aquestes
> vars <- c("Image","Exp.gene","Exp.spec","Qual.gen","Qual.spec","Value","Satisfaction","Startwork","Accgrade","Grade", "Salary.3")
> Enquesta <- Enquesta[vars]
> # Farem el remostreig estratificat per mantenir les proporcions (el dataset està desbalancejat i hi ha molt poques dades)
> N <- nrow(Enquesta)
> library(stratification)
> indexs <- Enquesta["Salary.3"]
> indexs$num <- seq.int(nrow(Enquesta))
> prova <- stratified(indexs,c("Salary.3"),1)
Error: could not find function "stratified"
> set.seed(1111)
> # Llegim el dataset com diu l'enunciat
> Enquesta <- read.csv("Enquesta.csv", header=TRUE,sep=",",dec=",")
> summary(Enquesta)
      Num        Career      Gender            Age         Studying        Contract    Salary    Firmtype         Accgrade        Grade         Startwork      Image              Exp.gene        
 Min.   :  1.0   EI :81   female: 20   25-26years:17   no.stud :70   fix.cont  :110   <18k:16   priva:116   7-8accnote:48   6.5-7note:66   after.grad:53   Min.   :-3.310000   Min.   :-3.710000  
 1st Qu.: 37.5   ETS:20   male  :127   27-28years:35   yes.stud:77   other.cont:  9   25k :23   publi: 31   accnote<7 :76   <6.5note :26   befor.grad:94   1st Qu.:-0.465000   1st Qu.:-0.440000  
 Median : 74.0   TEL:46                29-30years:61                 temp.cont : 28   35k :71               accnote>8 :23   >7.5note :24                   Median : 0.050000   Median : 0.180000  
 Mean   : 74.0                         31years+  :34                                  45k :25                               7-7.5note:31                   Mean   : 0.000408   Mean   : 0.000272  
 3rd Qu.:110.5                                                                        >45k:12                                                              3rd Qu.: 0.695000   3rd Qu.: 0.755000  
 Max.   :147.0                                                                                                                                             Max.   : 2.190000   Max.   : 1.600000  
    Exp.spec            Qual.gen           Qual.spec              Value        Satisfaction      
 Min.   :-4.030000   Min.   :-3.620000   Min.   :-3.0600000   Min.   :-3.07   Min.   :-3.940000  
 1st Qu.:-0.510000   1st Qu.:-0.645000   1st Qu.:-0.5700000   1st Qu.:-0.37   1st Qu.:-0.465000  
 Median : 0.090000   Median : 0.000000   Median : 0.1600000   Median : 0.13   Median : 0.160000  
 Mean   : 0.000204   Mean   : 0.000068   Mean   : 0.0001361   Mean   : 0.00   Mean   : 0.000136  
 3rd Qu.: 0.640000   3rd Qu.: 0.745000   3rd Qu.: 0.6350000   3rd Qu.: 0.69   3rd Qu.: 0.680000  
 Max.   : 1.660000   Max.   : 2.320000   Max.   : 1.8300000   Max.   : 1.78   Max.   : 1.860000  
> # Problema: s'ha inclòs el número de fila com a variable (Num), l'eliminem
> Enquesta$Num <- NULL
> # Recodifiquem la variable Salary, com diu l'enunciat
> recodificarSalary <- function(x) {
+   if (x == "35k")
+     return("35k")
+   if (x == "<18k" || x == "25k")
+     return("<35k")
+   return(">35k")
+ }
> Enquesta$Salary.3 <- as.factor(mapply(recodificarSalary,Enquesta$Salary))
> # Comprovem que s'ha fet bé:
> sum(Enquesta$Salary.3 == "<35k") # 39
[1] 39
> sum(Enquesta$Salary.3 == "35k") # 71
[1] 71
> sum(Enquesta$Salary.3 == ">35k") # 37
[1] 37
> # L'enunciat diu que utilitzem només les variables indicades, que entenem que són aquestes
> vars <- c("Image","Exp.gene","Exp.spec","Qual.gen","Qual.spec","Value","Satisfaction","Startwork","Accgrade","Grade", "Salary.3")
> Enquesta <- Enquesta[vars]
> # Farem el remostreig estratificat per mantenir les proporcions (el dataset està desbalancejat i hi ha molt poques dades)
> N <- nrow(Enquesta)
> library(splitstackshape)
> indexs <- Enquesta["Salary.3"]
> indexs$num <- seq.int(nrow(Enquesta))
> elementsPerClasseALearn = c(round((2*N/3)*(sum(indexs$Salary.3 == "<35k")/N)),round((2*N/3)*(sum(indexs$Salary.3 == "35k")/N)),round((2*N/3)*sum(indexs$Salary.3 == ">35k")/N))
> names(elementsPerClasseALearn) = c("<35k","35k",">35k")
> particions <- stratified(indexs,c("Salary.3"),bothSets = TRUE,size=elementsPerClasseALearn)
> 98 + 49
[1] 147
> learn.indexes <- particions$SAMP1$num
> test.indexes <- particions$SAMP2$num
> intersect(learn.indexes,test.indexes)
integer(0)
> intersect(learn.indexes,learn.indexes)
 [1]  86  70 138  24 116 142 126  19  81 141   1  94 119 129  99 136 106  55 146 144 105  35  69  90 122  25   4  50  76  28 110 127  57  43  14   3  63   8  44 133 109  62  73  51  16  97 135
[48] 139  77 114 131  65  56  54  74 101  71 100  64  32  66 103 124  85  10 130  23   5  31  78  72  75  33 112  21  20 107  83  87  93  38  80 117 125  96 104  17  42  26  60  98  89 145  30
[95]  12  79  92  59
> learn.data <- Enquesta[learn.indexes,]
> test.data <- Enquesta[test.indexes,]
> ### 2
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> set.seed(1111)
> (ntrees <- round(10^seq(1,3,by=0.2)))
 [1]   10   16   25   40   63  100  158  251  398  631 1000
> mtrys <- (1:nrow(Enquesta)-1)
> # prepare the structure to store the partial results
> rf.results <- matrix (rep(0,3*(length(ntrees))*(length(mtrys))),nrow=(length(ntrees)*length(mtrys)))
> colnames (rf.results) <- c("ntrees", "mtrys", "OOB")
> rf.results[,"ntrees"] <- ntrees
> rf.results[,"mtrys"] <- mtrys
> rf.results[,"OOB"] <- 0
> ii <- 1
> for (nt in ntrees)
+ { 
+   for (mtr in mtrys) 
+   {
+     model.rf <- randomForest(Salary.3 ~ ., data = learn.data, ntree=nt, mtry = mtr, proximity=FALSE, 
+                              strata=learn.data$Salary.3)
+     
+     # get the OOB
+     rf.results[ii,"OOB"] <- model.rf$err.rate[nt,1]
+     
+     ii <- ii+1
+   }
+ }
There were 50 or more warnings (use warnings() to see the first 50)
> warnings()
Warning messages:
1: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
2: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
3: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
4: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
5: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
6: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
7: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
8: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
9: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
10: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
11: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
12: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
13: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
14: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
15: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
16: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
17: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
18: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
19: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
20: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
21: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
22: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
23: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
24: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
25: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
26: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
27: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
28: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
29: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
30: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
31: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
32: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
33: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
34: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
35: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
36: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
37: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
38: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
39: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
40: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
41: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
42: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
43: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
44: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
45: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
46: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
47: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
48: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
49: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
50: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
> mtrys
  [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46
 [48]  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93
 [95]  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
[142] 141 142 143 144 145 146
> ### 2
> library(randomForest)
> set.seed(1111)
> (ntrees <- round(10^seq(1,3,by=0.2)))
 [1]   10   16   25   40   63  100  158  251  398  631 1000
> mtrys <- (1:ncol(Enquesta)-1)
> # Matriu per desar OOBs per cada model provat
> rf.results <- matrix (rep(0,3*(length(ntrees))*(length(mtrys))),nrow=(length(ntrees)*length(mtrys)))
> colnames (rf.results) <- c("ntrees", "mtrys", "OOB")
> rf.results[,"ntrees"] <- ntrees
> rf.results[,"mtrys"] <- mtrys
> rf.results[,"OOB"] <- 0
> ii <- 1
> for (nt in ntrees)
+ { 
+   for (mtr in mtrys) 
+   {
+     model.rf <- randomForest(Salary.3 ~ ., data = learn.data, ntree=nt, mtry = mtr, proximity=FALSE, 
+                              strata=learn.data$Salary.3)
+     
+     # get the OOB
+     rf.results[ii,"OOB"] <- model.rf$err.rate[nt,1]
+     
+     ii <- ii+1
+   }
+ }
There were 11 warnings (use warnings() to see them)
> warnings()
Warning messages:
1: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
2: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
3: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
4: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
5: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
6: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
7: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
8: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
9: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
10: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
11: In randomForest.default(m, y, ...) :
  invalid mtry: reset to within valid range
> mtry
Error: object 'mtry' not found
> mtrys
 [1]  0  1  2  3  4  5  6  7  8  9 10
> ### 2
> library(randomForest)
> set.seed(1111)
> (ntrees <- round(10^seq(1,3,by=0.2)))
 [1]   10   16   25   40   63  100  158  251  398  631 1000
> mtrys <- (1:(ncol(Enquesta)-1))
> # Matriu per desar OOBs per cada model provat
> rf.results <- matrix (rep(0,3*(length(ntrees))*(length(mtrys))),nrow=(length(ntrees)*length(mtrys)))
> colnames (rf.results) <- c("ntrees", "mtrys", "OOB")
> rf.results[,"ntrees"] <- ntrees
> rf.results[,"mtrys"] <- mtrys
> rf.results[,"OOB"] <- 0
> ii <- 1
> for (nt in ntrees)
+ { 
+   for (mtr in mtrys) 
+   {
+     model.rf <- randomForest(Salary.3 ~ ., data = learn.data, ntree=nt, mtry = mtr, proximity=FALSE, 
+                              strata=learn.data$Salary.3)
+     
+     # get the OOB
+     rf.results[ii,"OOB"] <- model.rf$err.rate[nt,1]
+     
+     ii <- ii+1
+   }
+ }
> # choose best value of 'ntrees'
> (lowest.OOB.error <- as.integer(which.min(rf.results[,"OOB"])))
[1] 35
> (ntrees.best <- rf.results[lowest.OOB.error,"ntrees"])
ntrees 
    16 
> (mtry.best <- rf.results[lowest.OOB.error,"mtrys"])
mtrys 
    5 
> rf.results
       ntrees mtrys       OOB
  [1,]     10     1 0.6562500
  [2,]     16     2 0.7346939
  [3,]     25     3 0.6210526
  [4,]     40     4 0.5876289
  [5,]     63     5 0.6041667
  [6,]    100     6 0.5714286
  [7,]    158     7 0.6428571
  [8,]    251     8 0.6185567
  [9,]    398     9 0.6391753
 [10,]    631    10 0.6224490
 [11,]   1000     1 0.5612245
 [12,]     10     2 0.6734694
 [13,]     16     3 0.5408163
 [14,]     25     4 0.5510204
 [15,]     40     5 0.5000000
 [16,]     63     6 0.5510204
 [17,]    100     7 0.5510204
 [18,]    158     8 0.6530612
 [19,]    251     9 0.5204082
 [20,]    398    10 0.5773196
 [21,]    631     1 0.6020408
 [22,]   1000     2 0.5918367
 [23,]     10     3 0.6326531
 [24,]     16     4 0.5714286
 [25,]     25     5 0.5714286
 [26,]     40     6 0.6530612
 [27,]     63     7 0.6632653
 [28,]    100     8 0.6428571
 [29,]    158     9 0.6632653
 [30,]    251    10 0.5510204
 [31,]    398     1 0.5714286
 [32,]    631     2 0.5306122
 [33,]   1000     3 0.5918367
 [34,]     10     4 0.5612245
 [35,]     16     5 0.4795918
 [36,]     25     6 0.5510204
 [37,]     40     7 0.5816327
 [38,]     63     8 0.6224490
 [39,]    100     9 0.5408163
 [40,]    158    10 0.5510204
 [41,]    251     1 0.5714286
 [42,]    398     2 0.5714286
 [43,]    631     3 0.5408163
 [44,]   1000     4 0.5408163
 [45,]     10     5 0.6020408
 [46,]     16     6 0.5714286
 [47,]     25     7 0.6326531
 [48,]     40     8 0.5510204
 [49,]     63     9 0.5816327
 [50,]    100    10 0.6122449
 [51,]    158     1 0.5612245
 [52,]    251     2 0.5510204
 [53,]    398     3 0.5918367
 [54,]    631     4 0.5306122
 [55,]   1000     5 0.5816327
 [56,]     10     6 0.5102041
 [57,]     16     7 0.5408163
 [58,]     25     8 0.5816327
 [59,]     40     9 0.5204082
 [60,]     63    10 0.4795918
 [61,]    100     1 0.5510204
 [62,]    158     2 0.5714286
 [63,]    251     3 0.5714286
 [64,]    398     4 0.5714286
 [65,]    631     5 0.5816327
 [66,]   1000     6 0.5714286
 [67,]     10     7 0.5306122
 [68,]     16     8 0.5102041
 [69,]     25     9 0.5306122
 [70,]     40    10 0.5306122
 [71,]     63     1 0.5612245
 [72,]    100     2 0.5204082
 [73,]    158     3 0.5816327
 [74,]    251     4 0.4897959
 [75,]    398     5 0.5510204
 [76,]    631     6 0.5510204
 [77,]   1000     7 0.5408163
 [78,]     10     8 0.5000000
 [79,]     16     9 0.5306122
 [80,]     25    10 0.5612245
 [81,]     40     1 0.5714286
 [82,]     63     2 0.5612245
 [83,]    100     3 0.5306122
 [84,]    158     4 0.5408163
 [85,]    251     5 0.5408163
 [86,]    398     6 0.5612245
 [87,]    631     7 0.5204082
 [88,]   1000     8 0.5408163
 [89,]     10     9 0.5612245
 [90,]     16    10 0.5408163
 [91,]     25     1 0.5510204
 [92,]     40     2 0.5714286
 [93,]     63     3 0.5816327
 [94,]    100     4 0.5510204
 [95,]    158     5 0.5510204
 [96,]    251     6 0.5612245
 [97,]    398     7 0.5408163
 [98,]    631     8 0.5612245
 [99,]   1000     9 0.5612245
[100,]     10    10 0.5510204
[101,]     16     1 0.5510204
[102,]     25     2 0.5510204
[103,]     40     3 0.5306122
[104,]     63     4 0.5306122
[105,]    100     5 0.5510204
[106,]    158     6 0.5306122
[107,]    251     7 0.5612245
[108,]    398     8 0.5408163
[109,]    631     9 0.5102041
[110,]   1000    10 0.5510204